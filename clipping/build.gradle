/*
 * Copyright 2017 Philip Cohn-Cort
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

// For reference: project.ext variables are defined in the top-level build.gradle file
/**
 * supportVersion is the oldest version of the support libraries against which this
 * codebase can compile.
 */
def supportVersion = '22.2.0'

// Maven deployment info (the name of the artifact is derived from the containing folder's name)
group = 'com.fuzz'
version = '0.1.0'

// Concept and execution for this configuration come from http://stackoverflow.com/q/29663918
configurations {
    javadocDeps {
        // This simply ensures that all dependencies of 'compile' are included when building javadoc
        extendsFrom compile
    }
}

android {
    compileSdkVersion project.ext.targetVersion
    buildToolsVersion project.ext.buildVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion project.ext.targetVersion
        versionCode 9
        versionName "$version"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.res.srcDirs = ["src/main/res"]
        main.java.srcDirs = ["src/main/java"]
    }
}

dependencies {
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Starting with support lib 24.2.0, ViewPager should be included with the following directive
    //compile "com.android.support:support-core-ui:$supportVersion"

    // Before that, though, this is the best way to include a ViewPager dependency.
    //noinspection GradleDependency
    compile "com.android.support:support-v4:$supportVersion"

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:2.2.5"

    // Manually include the classes jars - javadoc can't be directly built from aars at this time
    javadocDeps fileTree(dir: "$project.buildDir/intermediates/exploded-aar/", include:"**/classes.jar")
}



// Everything below this point is here to make Maven artifact creation easier.

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    // Some of the bootClasspath entries are aars - our javadoc generator ignores those
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
    destinationDir = file("../javadoc/clipping/")
    // Javadoc will error out for terrible reasons. We can't let it break the build indiscriminately
    failOnError false

    options.charSet = 'UTF-8'

    // The JDK 8 doc lint tool is useless for validating html. Disable just that.
    // Credit for this solution goes to http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
    // Incidentally, I have no idea what the second parameter ('-quiet') means in this context.
    options.addStringOption('Xdoclint:all,-html', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// A proper sources jar, with comments
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

// Request androidSources and javadoc artifacts
artifacts {
    archives androidSourcesJar
    archives javadocJar
}